from fastapi import FastAPI, File, UploadFile
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
from openai import OpenAI
from fastapi.responses import FileResponse
from fastapi import Form
from google.cloud import texttospeech
from fastapi import HTTPException

from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from fastapi.responses import JSONResponse
from slowapi.middleware import SlowAPIMiddleware
from fastapi import Request
import os
import json
import requests
from fastapi import BackgroundTasks
import uuid


import tempfile
import re

from dotenv import load_dotenv
load_dotenv()  

def init_gcp_creds():
    """
    –ù–∞ –ø—Ä–æ–¥–µ —á–∏—Ç–∞–µ–º –∫–ª—é—á —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GCP_SA_JSON.
    –õ–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª gcloud_key.json (–Ω–∏–∂–µ ‚Äî fallback).
    """
    j = os.getenv("GCP_SA_JSON")
    if j:
        p = os.path.join(tempfile.gettempdir(), "gcloud_key.json")
        with open(p, "w", encoding="utf-8") as f:
            f.write(j)
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = p
    else:
        if os.path.exists("./gcloud_key.json"):
            os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "./gcloud_key.json"

init_gcp_creds()


ALLOWED_ACTIONS = {
    "open_tab",        
    "open_map",        
    "open_chat",       
    "open_ad",        
    
    "search_service", 
    "start_post_ad",   
    
    "show_category",
    "show_min_price",
    
    "help",
    "none",
}

ALLOWED_TABS = {"home", "catalog", "map", "chats", "profile"}

def extract_json_obj(text: str) -> dict:
    """–ù–∞–¥—ë–∂–Ω–æ –≤—ã–Ω–∏–º–∞–µ–º JSON –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –æ–±–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç/```json."""
    if not text:
        raise ValueError("Empty model output")
    t = text.strip()
    if t.startswith("```"):
        t = t.strip("`")
        if t.lower().startswith("json"):
            t = t[4:].lstrip()
    try:
        return json.loads(t)
    except Exception:
        m = re.search(r"\{.*\}", t, flags=re.S)
        if not m:
            raise ValueError("No JSON object found in model output")
        return json.loads(m.group(0))

def normalize_reply(d: dict) -> dict:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç {answer, action, target} + –≤–∞–ª–∏–¥–∞—Ü–∏—è."""
    answer = str(d.get("answer", "")).strip()
    action = str(d.get("action", "none")).strip()
    target = str(d.get("target", "none")).strip() or "none"

    if action not in ALLOWED_ACTIONS:
        action = "none"

    if action == "open_tab":
        
        t = target.lower()
        target = t if t in ALLOWED_TABS else "none"

    return {"answer": answer, "action": action, "target": target}



ALLOWED_MIME = {
    "audio/m4a", "audio/mp4", "audio/x-m4a",
    "audio/mpeg", "audio/mp3", "audio/wav"
}
MAX_BYTES = 20 * 1024 * 1024  

async def _read_and_check(file: UploadFile) -> bytes:
    if file.content_type not in ALLOWED_MIME:
        raise HTTPException(status_code=415, detail="Unsupported audio format")
    data = await file.read()
    if not data:
        raise HTTPException(status_code=400, detail="Empty file")
    if len(data) > MAX_BYTES:
        raise HTTPException(status_code=413, detail="File too large")
    return data



api_key = os.getenv("OPENAI_API_KEY")


client = OpenAI(api_key=api_key)

limiter = Limiter(key_func=get_remote_address)

app = FastAPI()


@app.get("/healthz")
def healthz():
    return {"ok": True}


@app.get("/audio/{audio_id}")
async def get_audio(audio_id: str, bg: BackgroundTasks):
    path = os.path.join(tempfile.gettempdir(), f"vc_{audio_id}.mp3")
    if not os.path.exists(path):
        raise HTTPException(status_code=404, detail="Audio not found")
    
    bg.add_task(lambda p=path: os.path.exists(p) and os.remove(p))
    return FileResponse(
        path,
        media_type="audio/mpeg",
        filename="response.mp3",
        headers={"Content-Disposition": 'inline; filename="response.mp3"'}
    )


origins_env = os.getenv("CORS_ALLOW_ORIGINS", "").strip()
allow_origins = [o.strip() for o in origins_env.split(",") if o.strip()] or ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=allow_origins,      
    allow_credentials=False,          
    allow_methods=["*"],
    allow_headers=["*"],
    max_age=86400,                 
    expose_headers=["Content-Disposition"], 
)



app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)
app.add_middleware(SlowAPIMiddleware)

@app.exception_handler(RateLimitExceeded)
async def rate_limit_handler(request, exc):
    return JSONResponse(
        status_code=429,
        content={"error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
    )



class ChatRequest(BaseModel):
    message: str


@app.post("/chat")
@limiter.limit("10/minute")

async def chat_endpoint(request: Request, data: ChatRequest):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": """
–¢—ã ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ò–ò-–±–æ—Ç –∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "BQ | Barlyq Qyzmet", —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ–∫–∞–∑–∞–Ω–∏—è –±—ã—Ç–æ–≤—ã—Ö —É—Å–ª—É–≥, –∞—Ä–µ–Ω–¥—ã, —Ç–∞–∫—Å–∏, –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ 5 –≤–∫–ª–∞–¥–æ–∫: –ì–ª–∞–≤–Ω–∞—è, –ö–∞—Ç–∞–ª–æ–≥, –ö–∞—Ä—Ç–∞, –ß–∞—Ç—ã, –ü—Ä–æ—Ñ–∏–ª—å. –¢—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

üß≠ –û–°–ù–û–í–ù–´–ï –í–ö–õ–ê–î–ö–ò:
1. **–ì–ª–∞–≤–Ω–∞—è** ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ (–£—Å–ª—É–≥–∏, –†–∞–±–æ—Ç–∞, –ê—Ä–µ–Ω–¥–∞ –∏ –ü—Ä–æ–∫–∞—Ç, –¢–∞–∫—Å–∏), –ø–æ–∏—Å–∫, —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏.
2. **–ö–∞—Ç–∞–ª–æ–≥** ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∫–Ω–æ–ø–∫–∞ ‚Äú–ò—Å–∫–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ‚Äù.
3. **–ö–∞—Ä—Ç–∞** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è/—Ä–∞–±–æ—Ç—ã/—Ç–∞–∫—Å–∏. –£ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: ‚Äú–°—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º‚Äù, ‚Äú–°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º‚Äù, ‚Äú–í—ã–π—Ç–∏ –Ω–∞ –ª–∏–Ω–∏—é‚Äù.
4. **–ß–∞—Ç—ã** ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤, –≤–∫–ª—é—á–∞—è –æ—Ç–∫–ª–∏–∫–∏.
5. **–ü—Ä–æ—Ñ–∏–ª—å** ‚Äî –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∑–∞–∫–∞–∑—ã, –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∏—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç—ã.

üîê –≠–ö–†–ê–ù–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò:
‚Äì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ ‚Üí –≤–≤–æ–¥ –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏, –æ—Ç—á–µ—Å—Ç–≤–∞, email ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è.
‚Äì –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ (—Ñ–æ—Ç–æ).
‚Äì –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: –≤–≤–æ–¥ –ò–ò–ù, –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏ –ª–∏—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ.

üìå –ü–û–î–ê–ß–ê –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:
1. –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ 3 –∏–ª–∏ 4 —à–∞–≥–∞:
   ‚Äì –®–∞–≥ 1: –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.
   ‚Äì [–®–∞–≥ 2, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è] –ó–∞–≥—Ä—É–∑–∏—Ç–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (—ç—Ç–æ—Ç —à–∞–≥ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ).
   ‚Äì –®–∞–≥ 2/3: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏.
   ‚Äì –®–∞–≥ 3/4: –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É.
2. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Å –¥–≤—É–º—è –≤–∫–ª–∞–¥–∫–∞–º–∏: 
   ‚Äì ¬´–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è¬ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.
   ‚Äì ¬´–û—Ç–∫–ª–∏–∫–∏¬ª ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º –≤ —á–∞—Ç.
–ù–µ —É–ø–æ–º–∏–Ω–∞–π –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª ‚Äî —Ç–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
üíº –ó–ê–ö–ê–ó –£–°–õ–£–ì / –û–¢–ö–õ–ò–ö–ò:
‚Äì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—Å–ª—É–≥–∏, –Ω–∞–∂–∏–º–∞—Ç—å ‚Äú–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è‚Äù, –ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ/—Ä–µ–π—Ç–∏–Ω–≥—É.
‚Äì –í —Ä–∞–∑–¥–µ–ª–µ ‚Äú–ú–æ–∏ –∑–∞–∫–∞–∑—ã‚Äù –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å –∑–∞–∫–∞–∑—ã. –ö–Ω–æ–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∫–∞—Ä—Ç–æ—á–∫–∏.

üìç –ö–ê–†–¢–ê:
‚Äì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∑–∞–∫–∞–∑—ã (–∫—Ä–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏).
‚Äì –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç ‚Äú–≤—ã–π—Ç–∏ –Ω–∞ –ª–∏–Ω–∏—é‚Äù, –≤–∏–¥–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞–Ω–∏—è.
‚Äì –ó–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç ‚Äú—Å—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º‚Äù –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
‚Äì –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è).

üöñ –¢–ê–ö–°–ò:
‚Äì –í–∫–ª–∞–¥–∫–∞ ‚Äú–¢–∞–∫—Å–∏‚Äù ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç (–æ—Ç–∫—É–¥–∞ ‚Üí –∫—É–¥–∞), —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
‚Äì –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ‚Äú–ù–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è‚Äù ‚Äî –∏–¥—ë—Ç –ø–æ–∏—Å–∫.
‚Äì –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–º—è, —Ä–µ–π—Ç–∏–Ω–≥, –∞–≤—Ç–æ, —Ü–µ–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∏ ‚Äú–ü—Ä–∏–Ω—è—Ç—å‚Äù / ‚Äú–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚Äù.
‚Äì –í–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É.
‚Äì –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ –æ—Ü–µ–Ω–∫–∏ (–∑–≤–µ–∑–¥—ã, –æ—Ç–∑—ã–≤, —á–µ–∫).

üßæ –ü–†–û–§–ò–õ–¨:
‚Äì –†–∞–∑–¥–µ–ª—ã: ‚Äú–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚Äù, ‚Äú–ò–∑–±—Ä–∞–Ω–Ω–æ–µ‚Äù, ‚Äú–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã‚Äù, ‚Äú–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç—ã‚Äù, ‚Äú–ú–æ–∏ –∑–∞–∫–∞–∑—ã‚Äù, ‚Äú–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è‚Äù, ‚Äú–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å‚Äù.
‚Äì –í –ø—Ä–æ—Ñ–∏–ª–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è, –≥–æ—Ä–æ–¥, email, –ø–∞—Ä–æ–ª—å, —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

üì® –ß–ê–¢–´:
‚Äì –û—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏: ‚Äú–ß–∞—Ç—ã‚Äù –∏ ‚Äú–û—Ç–∫–ª–∏–∫–∏‚Äù.
‚Äì –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
‚Äì –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–º—è, –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Ä–µ–º—è.

üé§ –ì–û–õ–û–°–û–í–û–ô –í–í–û–î:
‚Äì –ù–∞ —ç–∫—Ä–∞–Ω–∞—Ö ‚Äú–ö–∞—Ä—Ç–∞‚Äù, ‚Äú–¢–∞–∫—Å–∏‚Äù, ‚Äú–ß–∞—Ç—ã‚Äù –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö –µ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω.
‚Äì –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º.

üß† –ß–¢–û –¢–´ –î–û–õ–ñ–ï–ù –î–ï–õ–ê–¢–¨:
‚Äì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ **–≤–æ–ø—Ä–æ—Å—ã –æ –∫–Ω–æ–ø–∫–∞—Ö, —ç–∫—Ä–∞–Ω–∞—Ö, –¥–µ–π—Å—Ç–≤–∏—è—Ö**: —á—Ç–æ –Ω–∞–∂–∞—Ç—å, –∫—É–¥–∞ –ø–µ—Ä–µ–π—Ç–∏, –∫–∞–∫ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∫–∞–∫ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è.
‚Äì –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å **—Ç–µ–∫—Å—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–π**.
‚Äì –î–∞–≤–∞—Ç—å **–ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏**: ‚Äú–®–∞–≥ 1: –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ö–∞—Ç–∞–ª–æ–≥‚Äô‚Äù, ‚Äú–®–∞–≥ 2: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚Ä¶‚Äù –∏ —Ç.–¥.
‚Äì –í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
‚Äì –†–∞–±–æ—Ç–∞–π –Ω–∞ **—Ç–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å** (—Ä—É—Å—Å–∫–∏–π/–∫–∞–∑–∞—Ö—Å–∫–∏–π).
‚Äì –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –≥–æ–ª–æ—Å–æ–º ‚Äî –æ—Ç–≤–µ—á–∞–π –≥–æ–ª–æ—Å–æ–º.
‚Äì –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ–ª–Ω—ã–π ‚Äî **–ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π –≤–µ–∂–ª–∏–≤–æ**.

‚ö†Ô∏è –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.

üéØ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Äì ‚Äú–ö–∞–∫ –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?‚Äù
‚Äì ‚Äú–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑?‚Äù
‚Äì ‚Äú–ì–¥–µ –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è?‚Äù
‚Äì ‚Äú–ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ?‚Äù
‚Äì ‚Äú–ö–∞–∫ —Å—Ç–∞—Ç—å —Ç–∞–∫—Å–∏—Å—Ç–æ–º?‚Äù
‚Äì ‚Äú–ö–∞–∫–æ–π —à–∞–≥ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ?‚Äù

–¢—ã –¥–µ–π—Å—Ç–≤—É–µ—à—å –∫–∞–∫ –≥—Ä–∞–º–æ—Ç–Ω—ã–π UI-–≥–∏–¥, –æ–±—É—á–µ–Ω–Ω—ã–π –ø–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ—Ä–æ–Ω—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "answer": "–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
  "action": "open_tab / open_chat / search_service / start_post_ad / open_ad / open_map / show_category / show_min_price / help / none",
  "target": "–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–π–±–µ–∫, —Ä–µ–º–æ–Ω—Ç, none)"
}
–î–æ–ø—É—Å—Ç–∏–º—ã–µ target –¥–ª—è action "open_tab": "home", "catalog", "map", "chats", "profile".

–ü—Ä–∏–º–µ—Ä—ã:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –û—Ç–∫—Ä–æ–π —á–∞—Ç —Å –ê–π–±–µ–∫–æ–º
GPT:
{
  "answer": "–û—Ç–∫—Ä—ã–≤–∞—é —á–∞—Ç —Å –ê–π–±–µ–∫–æ–º.",
  "action": "open_chat",
  "target": "–ê–π–±–µ–∫"
}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ö–∞–∫–∏–µ —É –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?
GPT:
{
  "answer": "–£ –Ω–∞—Å –µ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç, –¥–æ—Å—Ç–∞–≤–∫–∞, —É–±–æ—Ä–∫–∞ –∏ –¥—Ä—É–≥–∏–µ.",
  "action": "show_category",
  "target": "none"
}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ö–∞–∫–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ä–µ–º–æ–Ω—Ç–∞?
GPT:
{
  "answer": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–†–µ–º–æ–Ω—Ç' ‚Äî 500 ‚Ç∏.",
  "action": "show_min_price",
  "target": "—Ä–µ–º–æ–Ω—Ç"
}
"""
                },
                {"role": "user", "content": data.message}
            ],
            temperature=0.3,
            max_tokens=700
        )

        raw = response.choices[0].message.content or ""
        parsed = normalize_reply(extract_json_obj(raw))

        if parsed["action"] == "show_category":
            parsed["answer"] += "\n(–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"

        elif parsed["action"] == "show_min_price":
            parsed["answer"] = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        return parsed

    except requests.Timeout:
        raise HTTPException(status_code=504, detail="Upstream timeout")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))



def synthesize_text(text: str, output_path: str):
    client = texttospeech.TextToSpeechClient()
    synthesis_input = texttospeech.SynthesisInput(text=text)
    voice = texttospeech.VoiceSelectionParams(
        language_code="ru-RU",
        ssml_gender=texttospeech.SsmlVoiceGender.FEMALE
    )
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.MP3
    )
    response = client.synthesize_speech(
        input=synthesis_input, voice=voice, audio_config=audio_config
    )
    with open(output_path, "wb") as out:
        out.write(response.audio_content)


@app.post("/stt")
@limiter.limit("5/minute")
async def speech_to_text(request: Request, file: UploadFile = File(...)):
    try:
        
        audio_bytes = await _read_and_check(file)

       
        response = requests.post(
            "https://api.openai.com/v1/audio/transcriptions",
            headers={"Authorization": f"Bearer {api_key}"},
            files={
                "file": (file.filename, audio_bytes, file.content_type),
                "model": (None, "whisper-1"),
            },
            timeout=(5, 30) 
        )

        result = response.json()
        stt_text = result.get("text", "")

        
        correction = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å –∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å —Ñ—Ä–∞–∑—ã, –≥–¥–µ –∫–∞–∑–∞—Ö—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º—ã—Å–ª –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —á—ë—Ç–∫–æ."
                },
                {"role": "user", "content": stt_text}
            ],
            temperature=0.3,
            max_tokens=200
        )
        corrected_text = correction.choices[0].message.content

        return {
            "original_text": stt_text,
            "corrected_text": corrected_text
        }

    except requests.Timeout:
        raise HTTPException(status_code=504, detail="Upstream timeout")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

    
@app.post("/tts")
@limiter.limit("5/minute")
async def text_to_speech(request: Request, text: str = Form(...), bg: BackgroundTasks = ...):
    try:
        fname = f"tts_{uuid.uuid4().hex}.mp3"
        path = os.path.join(tempfile.gettempdir(), fname)
        synthesize_text(text, path)
        
        bg.add_task(lambda p=path: os.path.exists(p) and os.remove(p))
        return FileResponse(
            path,
            media_type="audio/mpeg",
            filename="response.mp3",
            headers={"Content-Disposition": 'inline; filename="response.mp3"'}
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/voice_chat")
@limiter.limit("5/minute")
async def voice_chat(request: Request, file: UploadFile = File(...)):
    try:
       
        audio_bytes = await _read_and_check(file)
        stt_response = requests.post(
            "https://api.openai.com/v1/audio/transcriptions",
            headers={"Authorization": f"Bearer {api_key}"},
            files={
                "file": (file.filename, audio_bytes, file.content_type),
                "model": (None, "whisper-1"),
            },
            timeout=(5, 30)
        )
        result = stt_response.json()
        stt_text = result.get("text", "")

        
        correction = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å –∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å —Ñ—Ä–∞–∑—ã, –≥–¥–µ –∫–∞–∑–∞—Ö—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º—ã—Å–ª –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —á—ë—Ç–∫–æ."
                },
                {"role": "user", "content": stt_text}
            ],
            temperature=0.3, max_tokens=200
        )
        corrected_text = correction.choices[0].message.content

        
        chat_response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": """
–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Barlyq Qyzmet.
–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "answer": "–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
  "action": "open_tab / open_chat / search_service / start_post_ad / open_ad / open_map / show_category / show_min_price / help / none",
  "target": "–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–π–±–µ–∫, —Ä–µ–º–æ–Ω—Ç, none)"
}
–î–æ–ø—É—Å—Ç–∏–º—ã–µ target –¥–ª—è action "open_tab": "home", "catalog", "map", "chats", "profile".
"""
                },
                {"role": "user", "content": corrected_text}
            ],
            temperature=0.3, max_tokens=700
        )

        raw_chat = chat_response.choices[0].message.content or ""
        chat_content = normalize_reply(extract_json_obj(raw_chat))
        final_answer = chat_content["answer"]

        
        audio_id = uuid.uuid4().hex
        audio_path = os.path.join(tempfile.gettempdir(), f"vc_{audio_id}.mp3")
        synthesize_text(final_answer, audio_path)

        
        base_url = str(request.base_url).rstrip("/")
        audio_url = f"{base_url}/audio/{audio_id}"

        
        return {
            "recognized_text": stt_text,
            "corrected_text": corrected_text,
            "final_answer": final_answer,
            "action": chat_content["action"],
            "target": chat_content["target"],
            "audio_url": audio_url
        }

    except requests.Timeout:
        raise HTTPException(status_code=504, detail="Upstream timeout")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
